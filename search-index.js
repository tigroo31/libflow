var searchIndex = JSON.parse('{\
"libflow":{"doc":"","i":[[0,"flag","libflow","",null,null],[4,"Flag","libflow::flag","TCP flags enum NS – ECN-nonce concealment protection …",null,null],[13,"ACK","","",0,null],[13,"CWR","","",0,null],[13,"ECE","","",0,null],[13,"FIN","","",0,null],[13,"NS","","",0,null],[13,"PSH","","",0,null],[13,"RST","","",0,null],[13,"SYN","","",0,null],[13,"URG","","",0,null],[0,"flow_id","libflow","",null,null],[3,"FlowId","libflow::flow_id","The flow unique identifier. A flow id is equal to another …",null,null],[12,"src","","Source IP address",1,null],[12,"src_port","","Source port. 0 if not relevant for protocol",1,null],[12,"dst","","Destination IP address",1,null],[12,"dst_port","","Destination port. 0 if not relevant for protocol",1,null],[12,"transport_protocol","","Layer 4 protocol (e.g TCP, UDP, ICMP)",1,null],[11,"new","","Create a Flow Id with IP addresses for src and dest …",1,[[]]],[0,"flow_information","libflow","",null,null],[3,"FlowInformation","libflow::flow_information","The flow information. It contains forward and backward …",null,null],[12,"sni","","SNI field",2,null],[12,"backward_packet_list","","backward packet list",2,null],[12,"forward_packet_list","","forward packet list",2,null],[11,"new","","Provide a flow information with empty packet lists for …",2,[[]]],[0,"generator","libflow","",null,null],[3,"Generator","libflow::generator","",null,null],[11,"new","","Provide a generator with an empty flow map for now.",3,[[]]],[11,"len","","Returns the number of elements in the map.",3,[[]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to …",3,[[["flowid",3]],[["option",4],["flowinformation",3]]]],[11,"contains_key","","Returns <code>true</code> if the map contains a value for the …",3,[[["flowid",3]]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for …",3,[[["flowid",3]],[["flowid",3],["entry",4],["flowinformation",3]]]],[11,"add","","used for IntoIterator trait",3,[[["flowid",3],["flowinformation",3]]]],[5,"read_from_file","","",null,[[["asref",8],["path",3]],["generator",3]]],[5,"write_to_file","","",null,[[["generator",3],["asref",8],["path",3]]]],[0,"packet","libflow","",null,null],[3,"Packet","libflow::packet","",null,null],[12,"length","","",4,null],[12,"window","","",4,null],[12,"timestamp","","timestamp",4,null],[12,"flag_list","","list of flags",4,null],[12,"network_protocol","","layer 3 protocol (e.g IPv4, IPv6)",4,null],[12,"network_header_length","","layer 3 header size (number of bytes)",4,null],[12,"network_payload_length","","layer 3 payload size (number of bytes)",4,null],[12,"position","","",4,null],[11,"new","","Provide the default structure for now.",4,[[]]],[11,"from","libflow::flag","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","libflow::flow_id","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","libflow::flow_information","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","libflow::generator","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","libflow::packet","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_iter","libflow::generator","",3,[[]]],[11,"clone","libflow::flag","",0,[[],["flag",4]]],[11,"clone","libflow::flow_id","",1,[[],["flowid",3]]],[11,"default","","Create a Flow Id with defaults values and \\\"0.0.0.0\\\" IP …",1,[[]]],[11,"default","libflow::flow_information","",2,[[],["flowinformation",3]]],[11,"default","libflow::generator","",3,[[],["generator",3]]],[11,"default","libflow::packet","",4,[[],["packet",3]]],[11,"cmp","libflow::flag","",0,[[["flag",4]],["ordering",4]]],[11,"eq","","",0,[[["flag",4]]]],[11,"eq","libflow::flow_id","",1,[[]]],[11,"partial_cmp","libflow::flag","",0,[[["flag",4]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libflow::flow_id","",1,[[["formatter",3]],["result",6]]],[11,"fmt","libflow::flow_information","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libflow::generator","",3,[[["formatter",3]],["result",6]]],[11,"fmt","libflow::packet","",4,[[["formatter",3]],["result",6]]],[11,"fmt","libflow::flow_id","",1,[[["formatter",3]],["result",6]]],[11,"hash","libflow::flag","",0,[[]]],[11,"hash","libflow::flow_id","",1,[[]]],[11,"serialize","libflow::flag","",0,[[],["result",4]]],[11,"serialize","libflow::flow_id","",1,[[],["result",4]]],[11,"serialize","libflow::flow_information","",2,[[],["result",4]]],[11,"serialize","libflow::generator","",3,[[],["result",4]]],[11,"serialize","libflow::packet","",4,[[],["result",4]]],[11,"deserialize","libflow::flag","",0,[[],["result",4]]],[11,"deserialize","libflow::flow_id","",1,[[],["result",4]]],[11,"deserialize","libflow::flow_information","",2,[[],["result",4]]],[11,"deserialize","libflow::generator","",3,[[],["result",4]]],[11,"deserialize","libflow::packet","",4,[[],["result",4]]]],"p":[[4,"Flag"],[3,"FlowId"],[3,"FlowInformation"],[3,"Generator"],[3,"Packet"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);